<resources>

    <string name = "app_name">Data Structures and Algorithms</string>
    <string name = "topics">Topics</string>
    <string name = "title_activity_topic">Data Structures and Algorithms with Java</string>

    <string name = "array_topic_activity">Arrays</string>
    <string name="linkedList_topic_activity">LinkedListTopicActivity</string>

    <string name = "array_introduction">Array Introduction</string>


    <string name = "arrays_intro_paragraph">
                Arrays are one of the first data structures that you will be introduced to first for
                primitive data types and then objects. If you have some basic programming experience
                then you should already have met the materials with in this topic.
    </string>

    <string name="array_declaration">Declaring an Array</string>
    <string name="array_declaration_paragraph">
        The following shows the declaration of an array, but the contents of the array would be set to 0 by default.
        \n
        \n
        int[] myIntArray = new int[3];
    </string>
    <string name="array_initialisation_para">

        \n
        \n
        The following shows the declaration as well as initialization of the values in the array.
        \n
        The length is defined by the amount of objects (in this case numbers) within the curly brackets.
        \n
        \n
        int[] myIntArray = {1,2,3};
    </string>

    <string name="numberInputOneHint">1st number</string>
    <string name="numberInputTwoHint">2nd number</string>
    <string name="numberInputThreeHint">3rd number</string>
    <string name="arrayInitialisationButtonText">Submit Initialisation</string>
    <string name="arrayDeclarationButtonText">Submit Declaration</string>

    <string name="array_select_sort">Select Sort</string>
    <string name="array_select_sort_button_text">Submit values</string>
    <string name="array_select_sort_para">
        The algorithm divides the input list into two parts:
        the sublist of sorted items, which is built up from left to right,
        and the sublist of unsorted items that occupy the rest of the list.
        Initially, the sorted sublist is empty and the unsorted sublist is the entire input list.
        \n
        The algorithm proceeds by finding the smallest (or largest,
        depending on sorting order) element in the unsorted sublist,
        exchanging it with the leftmost unsorted element (putting it in sorted order),
        and moving the sublist boundaries one element to the right.
        \n
        Select sorts complexity is rated for best, worst and average case as O(n^2).
        It is mainly used for real-time computing as it\'s behaviour is identical no matter what.
    </string>

    <string name="array_bubble_sort">Bubble Sort</string>
    <string name="array_bubble_sort_button_text">submit values</string>
    <string name="array_bubble_sort_para">
        From the start, compare every adjacent pair, swap their position if they are not in the right order
        (the right value is smaller than the left). After each iteration, one less element
        is needed to be compared until there are no more elements left to be compared.
        \n
        \n
        Bubble sorts complexity comes in at an O(n^2) for it\'s worst, average and best case.
        It is mainly used when a list is mostly sorted, with only a few items out of place.
    </string>


    <string name="array_merge_sort">Merge Sort</string>
    <string name="array_merge_sort_button_text">submit values</string>
    <string name="array_merge_sort_para">
        First divide the list into the smallest unit (1 element),
        then compare each element with the adjacent list to sort and merge the two adjacent lists.
        Finally all the elements are sorted and merged.
        \n
        Merge sort is very quick and efficient. It\'s worst and average complexity time is O(n log n).
        It\'s worst case is 39% fast than quick sorts average case.
        \n
        The downside to it, is that it uses up a lot of space so if that is an issue,
        other options should be considered.
    </string>

    <string name="array_linear_search">Linear Search</string>
    <string name="array_linear_search_button_text">submit values</string>
    <string name="array_linear_search_para">Paragraph about Linear search</string>

    <string name="array_binary_search">Binary Search</string>
    <string name="array_binary_search_para">Paragraph about binary search</string>

    <string name="linkedLists_topic_heading">LinkedLists</string>

    <string name="linkedList_introduction">Introduction</string>
    <string name="linkedList_introduction_para">
                    A linkedList is a data structure, of a sequence of linked nodes, that stores a
                    sequence of elements that can be repeated.
                    \n
                    \n
                    Each node in a LinkedList is composed of a data item and a reference or
                    references depending on its implementation.
                    \n
                    \n
                    The java standard library implements a doubly LinkedList. LinkedList are generally
                    faster at inserting and removing elements,especially at either end of the list,
                    over their counter part ArrayList.
                    \n
                    \n
                    Through out the topics and examples given in this topic we will use singly linked
                    nodes until doubly linked are required. These are described later on in declaring
                    a LinkedList
    </string>

    <string name="linkedList_declaration">Declaration</string>
    <string name="linkedlist_declaration_para">
                      A LinkedList can be created though the use of a singly or doubly linked nodes.
                      A node is made up of a data item and a node or nodes referencing the next or
                      previous nodes in a sequence.
                      \n
                      \n
                      Example of singly LinkedList node
                      \n
                      \n
                      public static class Singly_Linked_Node T {\n
	                  \t  T item;\n
	                  \t  Node T next;\n
                      \t  Node(T item, Node T next){\n
		              \t\t    this.item = item;\n
		              \t\t    this.next = next;\n
	                  \t  }\n
                      }
                      \n
                      \n
                      Example of doubly LinkedList node
                      \n
                      \n
                      public static class Singly_Linked_Node T{
                      \n
                      \t      T item;\n
                      \t      Node T previous;\n
                      \t      Node T next;\n

                      \t      Node(T item, Node T previous, Node T next){\n
                      \t\t         this.item = item;\n
                      \t\t         this.previous = previous;\n
                      \t\t          this.next = next;\n
                      \t      }\n
                      }\n
                      \n
                      \n

                      As you have seen in both implementations for a LinkedList, both nodes use a
                      generic data type (T). This allows the linked node and LinkedList to contain
                      any Object of the same type to be placed within the LinkedList.
                      \n
                      \n
                      The next and previous nodes are used to reference the adjacent nodes in the LinkedList
                      \n
                      \n
                      We will see later how to add / remove references. However below you will see
                      how to set up a skeletal implementation a LinkedList.
                      \n
                      \n
                      public class LinkedList T {\n

                      \t\t  private static class Node T { 8230;}\n

                      \t\t      Node T head, last;\n

                      \t\t      //Methods for add and remove for LinkedList.\n
                        }
                      \n
                      \n

                      To declare a LinkedList from the standard java library import the java package
                      java.util.LinkedList; and create a LinkedList variable defining what object it
                      can take.
                      \n
                      \n
                      examples
                      \n
                      \n
                      LinkedList String stringList = new LinkedList();
                      \n
                      \n
                      LinkedList Integer intList = new LinkedList();
              </string>

</resources>
