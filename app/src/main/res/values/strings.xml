<resources>

    <string name = "app_name">Data Structures and Algorithms</string>
    <string name = "topics">Topics</string>
    <string name = "title_activity_topic">Interactive Learning</string>

    <string name = "array_topic_activity">ArrayTopicActivity</string>
<<<<<<< HEAD
    <string name="linkedList_topic_activity">LinkedListTopicActivity</string>


    <string name = "array_topic_intro">ArrayTopicIntro</string>
    <string name="linkedList_topic_intro">LinkedListIntro</string>


    <string name = "arrays_topic_heading">Arrays</string>
    <string name="linkedLists_topic_heading">LinkedLists</string>

    <string name = "arrays_intro_heading">Arrays Introduction</string>
    <string name = "arrays_declaration_heading">Declaring an Array</string>

    <string name = "arrays_intro_paragraph">
=======


    <string name = "array_topic_intro">ArrayTopicIntro</string>
    <string name = "arrays">Arrays</string>
    <string name = "arrays_intro">Arrays Introduction</string>

    <string name="array_length_declare" >Array Length Declare</string>
    <string name = "arrays_intro_para">
>>>>>>> origin/master
        Arrays are one of the first data structures that you will be introduced to first for primitive
        data types and then objects. If you have some basic programming experience then you should
        already have met the materials with in this topic.
        \n
        \n
        Below is a brief overview of each of the topics covered in this topic:
        \n
        \n
        Declaring Arrays of Length - Learn to declare an array of a fixed length.
        \n
        \n
        Declaring Array with values - Learn to declare an array with values on declaration.
        \n
        \n
        Different Arrays - Learn what types of Arrays there is.
        \n
        \n
        Sorting - Learn how to sort an array in different orders.
        \n
        \n
        Searching - Learn how to efficacy search an array.
    </string>
<<<<<<< HEAD

    <string name="array_declare">Array Length Declare</string>
=======
    <string name = "array_declaration">Declaring an Array</string>
>>>>>>> origin/master
    <string name="array_declaration_para">
        The following shows the declaration of an array, but the contents of the array would be set to 0 by default.
        \n
        \n
        int[] myIntArray = new int[3];
    </string>
    <string name="array_initialisation_para">

        \n
        \n
        The following shows the declaration as well as initialization of the values in the array.
        \n
        The length is defined by the amount of objects (in this case numbers) within the curly brackets.
        \n
        \n
        int[] myIntArray = {1,2,3};
    </string>

    <string name="numberInputOneHint">1st number</string>
    <string name="numberInputTwoHint">2nd number</string>
    <string name="numberInputThreeHint">3rd number</string>
    <string name="arrayInitialisationButtonText">Submit Initialisation</string>
    <string name="arrayDeclarationButtonText">Submit Declaration</string>




    <string name="LinkedList_declare">LinkedListDeclare</string>
    <string name="linkedlist_intro">Arrays Introduction</string>
    <string name="linkedlist_intro_para1">LinkedLists are an implementation of a list and the way javas
                                   standard library does this is in a doubly linked list of nodes.
                                   However before we get too in dept lets revise what a list is.
                                   \n
                                   \n
                                   As seen before in ArrayList a list is a sequence of elements where
                                   each element has a position in the list and elements can be repeated
                                   within the list. LinkedList and ArrayList are both ways of storing
                                   a list but have different implementations that lead to different
                                   advantages and disadvantages which will be outlined with in all
                                   topics of LinkedLists.
                                   \n
                                   \n
                                   LinkedLists can be implemented in one of two ways through a singly
                                   or doubly linked list of nodes. A node is a data structure that
                                   contains an element with is an item for a type the list wants to
                                   store and a connection with the next node. Below you will see a
                                   simple implementation of a node using T as a generic type. </string>
    <string name="linkedlist_intro_para2">Through the topics and examples give in this topic we will
                                          use singly linked nodes till doubly linked are needed.
                                          \n
                                          \n
                                          The topics covered within LinkedLists are:
                                          \n
                                          \n
	                                      Declaring a LinkedList - Learn how to declare a LinkedList
                                          and how it works with nodes.
	                                      \n
                                          \n
	                                      Adding to A LinkedList - Learn about adding to an item and
                                          a node to a LinkedList
	                                      \n
                                          \n
	                                      Removing from a LinkedList - Learn about the process of
                                          removing an node from a LinkedList and the problems you have to lead with.
	                                      \n
                                          \n
	                                      Rotating a LinkedList - learn how to alter a LinkedList of
                                          the items are rotated around themselves.</string>
</resources>
